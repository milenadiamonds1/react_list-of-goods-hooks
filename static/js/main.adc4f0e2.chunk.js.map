{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortType","setSortType","visibleGoods","goods","sort","prevGood","nextGood","LENGTH","length","ALPHABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EA5CD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOC,GAgBzB,OAdAD,EAAaE,MAAK,SAACC,EAAkBC,GACnC,OAAQN,GACN,KAAKP,EAASc,OACZ,OAAOF,EAASG,OAASF,EAASE,OACpC,KAAKf,EAASgB,SACZ,OAAOJ,EAASK,cAAcJ,GAChC,QACE,OAAO,MAGTT,GACFK,EAAaS,UAGRT,EAwBcU,CAAkBlB,EACrC,CACEG,aACAG,aAGJ,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYf,IAAaP,EAASgB,WAEpCO,QAvBe,WACrBf,EAAYR,EAASgB,WAiBjB,iCAUA,wBACEK,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYf,IAAaP,EAASc,SAEpCS,QArCa,WACnBf,EAAYR,EAASc,SA+BjB,4BAUA,wBACEO,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAalB,IAEfmB,QAnDQ,WACdlB,GAAYD,IA6CR,sBAUEA,GAAcG,IAAaP,EAASM,OACpC,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAhDI,WACZlB,GAAW,GACXG,EAAYR,EAASM,OA2Cf,sBAUJ,6BACGG,EAAae,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC1HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.adc4f0e2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((prevGood: string, nextGood: string) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return prevGood.length - nextGood.length;\n      case SortType.ALPHABET:\n        return prevGood.localeCompare(nextGood);\n      default:\n        return 0;\n    }\n  });\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reverse = () => {\n    setReverse(!isReversed);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const reset = () => {\n    setReverse(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer,\n    {\n      isReversed,\n      sortType,\n    });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}