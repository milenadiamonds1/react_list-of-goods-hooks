{"version":3,"sources":["App.tsx","components/goodsList.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortType","setSortType","visibleGoods","sort","prevGood","nextGood","LENGTH","length","ALPHABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECbQC,EAAuB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrC,OACE,6BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,SDJnBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAkCE,IAAMM,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASP,EAASU,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EA5CD,SACLX,EADK,GAGJ,IADCS,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOX,GAgBzB,OAdAW,EAAaC,MAAK,SAACC,EAAkBC,GACnC,OAAQL,GACN,KAAKX,EAASiB,OACZ,OAAOF,EAASG,OAASF,EAASE,OACpC,KAAKlB,EAASmB,SACZ,OAAOJ,EAASK,cAAcJ,GAChC,QACE,OAAO,MAGTR,GACFK,EAAaQ,UAGRR,EAwBcS,CAAkBjB,EACrC,CACEG,aACAG,aAGJ,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBACpB,CACE,WAAYd,IAAaX,EAASmB,WAEtCO,QAxBe,WACrBd,EAAYZ,EAASmB,WAiBjB,iCAWA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBACpB,CACE,WAAYd,IAAaX,EAASiB,SAEtCS,QAvCa,WACnBd,EAAYZ,EAASiB,SAgCjB,4BAWA,wBACEO,KAAK,SACLD,UAAWE,IAAW,oBACpB,CACE,YAAajB,IAEjBkB,QAtDQ,WACdjB,GAAYD,IA+CR,sBAWEA,GAAcG,IAAaX,EAASU,OACpC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAnDI,WACZjB,GAAW,GACXG,EAAYZ,EAASU,OA8Cf,sBAUJ,cAAC,EAAD,CAAWR,MAAOW,QE5HxBc,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.052d3b31.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { GoodsList } from './components/goodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((prevGood: string, nextGood: string) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return prevGood.length - nextGood.length;\n      case SortType.ALPHABET:\n        return prevGood.localeCompare(nextGood);\n      default:\n        return 0;\n    }\n  });\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reverse = () => {\n    setReverse(!isReversed);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const reset = () => {\n    setReverse(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer,\n    {\n      isReversed,\n      sortType,\n    });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            })}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning',\n            {\n              'is-light': !isReversed,\n            })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList goods={visibleGoods} />\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  goods: string[];\n};\n\nexport const GoodsList: FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map((good) => (\n        <li data-cy=\"Good\" key={good}>\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}